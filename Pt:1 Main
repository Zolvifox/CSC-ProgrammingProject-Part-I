package prog01_aOrderedList;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;

public class Prog01_aOrderedList {
	public static void main(String[] args) {
		/*
		 * Prog01_aOrderedList holds the main program along with several methods
		 * Such methods are getOutputFile and getInputFile
		 * Reads files and sorts them within a list before writing into another file
		 * 
		 * CSC 1351 Programming Project No 1
		 * 
		 * Section 2
		 * 
		 * @Author Aaron Zuvich
		 * @Since 3/17/2024 11:59 pm
		 */
		
		
		aOrderedList orderedList = new aOrderedList();
		//Prog01_aOrderedList mainClass = new Prog01_aOrderedList();
		Car newCar;
		
		try {
			
			Scanner fileRead = getInputFile("Enter Input Filename: ");
			while(fileRead.hasNextLine()) {
				String readLine = fileRead.nextLine();
				System.out.println(readLine);
				String[] arrOfStr = readLine.split(",");
				
				if (arrOfStr[0].equals("A")) {
					
					newCar = new Car(arrOfStr[1], Integer.parseInt(arrOfStr[2]), Integer.parseInt(arrOfStr[3]));
					orderedList.add(newCar);
					
				}
				
				else if (arrOfStr[0].equals("D")) {
					newCar = new Car(arrOfStr[1], Integer.parseInt(arrOfStr[2]), 0);
					orderedList.reset();
					while (orderedList.hasNext()) {
						Car compareCar = (Car) orderedList.next();
						if (compareCar.compareTo(newCar) == 0) {
							orderedList.remove();
							break;
						}
					}
				}
				
				else {
					arrOfStr = Arrays.copyOf(arrOfStr, (4));
				}
				
				
			}
			fileRead.close();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		try {
			PrintWriter findFile = getOutputFile("Enter Output Filename: ");
				findFile.println(orderedList.toString());
				findFile.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		
	}
	
	
	public static PrintWriter getOutputFile(String UserPrompt) throws FileNotFoundException {
		/*
		 * Searches for a user file to write into. 
		 * Continues prompting if file is not found. Throws FileNotFound Exception if exited.
		 * Current members describe what values they hold (i.e. userInput stores the users response)
		 * 
		 * CSC 1351 Programming Project No 1
		 * 
		 * Section 2
		 * 
		 * @Author Aaron Zuvich
		 * @Since 3/17/2024 11:59 pm
		 */
		
		//Definition of Variables
		Scanner userInput = new Scanner(System.in);
		System.out.println(UserPrompt);
		String fileDir = userInput.nextLine();
		File fileName = new File(fileDir);
		
		//Continuous loop when fileName is not found
		while (!(fileName).exists()) {
			
			System.out.println("The specified file <" + fileName + "> does not exist. Would you like to re-enter the name? <Y/N>   ");
			fileDir = userInput.nextLine();
			
			//Repeats previous prompts and continues with loop
			if (fileDir.equalsIgnoreCase("y")) {
				System.out.println(UserPrompt);
				fileDir = userInput.nextLine();
				fileName = new File(fileDir);
				continue;
			}
			
			//Throws FileNotFoundException if user wishes to exit
			else if (fileDir.equalsIgnoreCase("n")) {
				userInput.close();
				throw new FileNotFoundException();
			}
			
			//If any other input is specified during these prompts
			else {
				System.out.println("Invalid Input.");
			}
		}
		PrintWriter writer = new PrintWriter(fileName);
		
		userInput.close();
		return writer;
	}
	
	
	@SuppressWarnings("resource")
	public static Scanner getInputFile(String UserPrompt) throws FileNotFoundException {		
		
		/*
		 * Searches for a user file to read. 
		 * Continues prompting if file is not found. Throws FileNotFound Exception if exited.
		 * Current members describe what values they hold (i.e. userInput stores the users response)
		 * 
		 * CSC 1351 Programming Project No 1
		 * 
		 * Section 2
		 * 
		 * @Author Aaron Zuvich
		 * @Since 3/17/2024 11:59 pm
		 */
		
		//Definition of Variables
		
		
		//Definition of Variables
		Scanner userInput1 = new Scanner(System.in);
		System.out.println(UserPrompt);
		String fileDir = userInput1.nextLine();
		File fileName = new File(fileDir);
		
		//Continuous loop when fileName is not found
		while (!(fileName).exists()) {
			
			System.out.println("The specified file <" + fileName + "> does not exist. Would you like to re-enter the name? <Y/N>   ");
			fileDir = userInput1.nextLine();
			
			//Repeats previous prompts and continues with loop
			if (fileDir.equalsIgnoreCase("y")) {
				System.out.println(UserPrompt);
				fileDir = userInput1.nextLine();
				fileName = new File(fileDir);
				continue;
			}
			
			//Throws FileNotFoundException if user wishes to exit
			else if (fileDir.equalsIgnoreCase("n")) {
				userInput1.close();
				throw new FileNotFoundException();
			}
			
			//If any other input is specified during these prompts
			else {
				System.out.println("Invalid Input.");
			}
		}
		
		Scanner scann = new Scanner (fileName);
		return scann;
	}
}


class Car implements Comparable<Car> {
	/*
	 * Car class holds the constructor for the car object in the main program 
	 * Also includes several methods, notably an compareTo method and an override for toString method.
	 * Make, year, and price define the Car object.
	 * 
	 * CSC 1351 Programming Project No 1
	 * 
	 * Section 2
	 * 
	 * @Author Aaron Zuvich
	 * @Since 3/17/2024 11:59 pm
	 */
	
	//Defined variables
	private String make;
	private int year;
	private int price;
	
	//Constructor
	public Car(String make, int year, int price) {
		this.make = make;
		this.year = year;
		this.price = price;
	}
	
	//get() methods. Each obtain a different piece of the class variables
	public String getMake() {
		return make;
	}
	
	public int getYear() {
		return year;
	}
	
	public int getPrice() {
		return price;
	}
	
	//Comparison method. compares two values against each other based on make then the year.
	public int compareTo(Car other) {
		
		if (make.compareTo(other.make) == 0) {
			return Integer.compare(year, other.year);
		}
		
		else {
			return make.compareTo(other.make);
		}
	}
	
	//Conversion to String method. Overrides original toString method.
	@Override
	public String toString() {
		//System.out.printf("Make: %s, Year: %s, Price: %s;" ,make, year, price);
		return ("Make: " + make + ", Year: " + year + ", Price: " + price + ";");
	}
	
}

class aOrderedList {
	/*
	 * aOrderedList holds a defined array that will redefine itself if space is needed.
	 * This also contains special methods to add objects into an array and printing method.
	 * Lastly, this contains a way to remove specific items while shifting others down, filling the missing space.
	 * 
	 * CSC 1351 Programming Project No 1
	 * 
	 * Section 2
	 * 
	 * @Author Aaron Zuvich
	 * @Since 3/17/2024 11:59 pm
	 */
	
	final int sizeIncrements = 20;  //Size of increments for increasing ordered list
	private Comparable[] oList; //The ordered list
	private int listSize; //Size of ordered list
	private int numObjects; //number of individual objects in list
	private int currentIndex; //tracks the index currently being looked at
	
	//Constructor taking no parameters. Initializes numObjects, listSize, and size of oList.
	public aOrderedList() {
		numObjects = 0;
		listSize = sizeIncrements;
		oList = new Car[listSize];
	}
	
	//First checks to see if array needs to be resized. If so, resizes it.
	//Otherwise, adds a Car object in the correct position within the array based on a sorting algorithm
	public void add(Comparable newCar) {
		if(numObjects == listSize) {
			resizeArray();
		}
		
		int index = (numObjects-1);
		while ((index) >= 0 && newCar.compareTo(oList[index]) < 0) {
			oList[index + 1] = oList[index];
			index--;
		}
		oList[index + 1] = newCar;
		numObjects++;
	}
	
	//Resizes the oList array by copying the old elements into a new, bigger array.
	public void resizeArray() {
		oList = Arrays.copyOf(oList,(3*oList.length));
	}
	
	//Overriding the toString method to provide a special format for printing the array of Car objects.
	@Override
	public String toString() {

		String result;
		result = "Number of Cars: " + numObjects + "\n\n";
		for (int i = 0; i < numObjects; i++) {
			
			result += String.format("Make:  %11s \n", ((Car) oList[i]).getMake());
			result += String.format("Year:  %11s \n", ((Car) oList[i]).getYear());
			String pricestr = String.format("$%,d" ,((Car) oList[i]).getPrice());
			result += String.format("Price: %11s \n\n", pricestr);
			
			/*
			result += "Make: " + ((Car) oList[i]).getMake() + "\n";
			result += "Year: " + ((Car) oList[i]).getYear() + "\n";
			result += "Price: " + ((Car) oList[i]).getPrice() + "\n\n";
			*/
		}
		return result;
	}
	
	//Returns the number of objects within the array.
	public int size() {
		return numObjects;
	}
	
	//Retrieves a specific Car object within the array via the index.
	public Comparable get(int index) {
		return oList[index];
	}
	
	//checks if the array contains no objects.
	public boolean isEmpty() {
		if (numObjects == 0) {
			return true;
		}
		else {
		return false;
	
		}
	}
	
	//Proceeds to make currentIndex -1.
	public void reset () {
		currentIndex = -1;
	}
	
	//Next method looks at the next index and returns the item within that index or null if nothing is there.
	public Comparable next() {
		if (hasNext()) {
			Comparable index = oList[currentIndex + 1];
			currentIndex++;
			return index;
		}
		else {
			return null;
		}
	}
	
	//Checks if the next index contains an value or not
	public boolean hasNext() {
		if (currentIndex < numObjects) {
			return true;
		}
		else {
			return false;
		}
	}
	
	//Removes a value from the current index and shifts all other indexes down one, filling the gap.
	public void remove(int index) {
		for (int i = index; i < numObjects - 1; i++) {
			oList[i] = oList[i + 1];
		}
		numObjects--;
	}
	
	//Calls the previous remove method except uses the currentIndex variable to determine what to remove.
	public void remove() {
			remove(currentIndex);
	}
}
